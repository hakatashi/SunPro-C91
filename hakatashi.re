= ISUCON 2016 参戦記

//raw[|latex|\\chapterauthor{hakatashi}]

まえがきぶりの博多市です。

本当はもうちょっとウィットに富んだ記事を執筆する予定だったのですが、
残念ながら個人的な事情でまとまった時間が取れなかったため、執筆できませんでした。
が、個人的に書く意欲はあるので、
4月9日に開催が決まった技術書典2にもし受かったらそこで蔵出ししたいと思います。

というわけで、今回はSunProのメンバーでISUCON6に参加したときの記録を綴りたいと思います。
予選参加以前の模擬試合から本戦までの記録をわりと綿密に書いたので参戦記にしては長くなってしまいましたが、
そのぶん読んでためになる文章になっていると思います。
今後ISUCONに参加する人もそうでない人も、ぜひぜひご覧ください。

== ISUCONとは

ISUCONとは、LINE社主催によって開催されている、Webアプリケーションのパフォーマンスチューニングの能力を競うコンテストです。
公式サイト@<fn>{isucon-official-quote}によると……、

//quote{
お題となるWebサービスを決められたレギュレーションの中で限界まで高速化を図るチューニングバトル、
それがISUCONです。過去の実績も所属している会社も全く関係ない、結果が全てのガチンコバトルです。
//}

とのことです。具体的には、競技開始時になんらかのWebアプリケーションが動作しているサーバーが与えられ、
自由に操作できる状態になります。このWebアプリケーションに対して外部からベンチマークソフトが
大量にリクエストを投げてくるので、競技者はサーバー内でできるあらゆることを駆使してアプリケーションを高速化し、
8時間の競技時間の中で最も高いスコアを出すと勝利となります。

例えばですが、後述するpixiv社内ISUCONでは、Instagramを題材にしたウェブサービス、“isucogram”が与えられました。
これは元ネタのInstagramと同じように写真共有SNSであり、写真投稿機能やコメント機能など
簡単な機能が実装されているだけですが、随所随所に動作が重くなるような変なコードがわざと書かれており、
まずはこれらを直していくことが参加者の最初の課題となります。

また、参加者によって得意な言語が異なるという考慮から、ISUCONでは一回の競技につき、
複数の言語による実装が出題者によって用意されます。
用意される言語は毎年異なるのですが、例年Ruby、PHP、Goなどが実装されています。
また近年は用意される実装数も増える傾向にあるようで、今年の予選ではなんと9言語による実装が用意されました。
@<fn>{fixing-point}

ISUCONは通常、一人ではなくチームを組んで参加します。現在のレギュレーションだと2人もしくは3人で参加できますが、
やはり人数がお多いほど有利になるようで本戦参加チームはだいたい3人で参加していました。
本番ではチーム内でどれだけうまく作業を分担してスコアアップを目指せるかが勝利の鍵となります。

# やっていいこと

ISUCONはすでに6回の開催を重ね、最新の大会は2016年9月17・18日に予選が、10月22日に本戦が開かれました。
SunPro有志によるチーム「チームえっち」は今回これに初参戦し、無事予選を通過し本戦に出場することができました。

//footnote[isucon-official-quote][ISUCON6 開催＆日程決定！ #isucon http://isucon.net/archives/46239949.html]
//footnote[fixing-point][ちなみにこの上で説明している「直すべきポイント」も当然全ての言語に実装されています。なのでどこが運営の想定した直すべきポイントなのかを考える上で、どの言語でも実装可能であることを考えるのはけっこう重要です。]

== pixiv社内ISUCON

博多市はISUCONの存在を以前から知っていましたが、最初は特に興味を持っていませんでした。
正直な話、「パフォーマンスチューニング」というと別に新しい何かを産み出すでもなし、
つまらないメンテナンス作業の延長のようにしか思えず、
また参加するためにチームを組む必要があることからハードルを高く感じて、
参加するのをためらいました。

そんな筆者がISUCONに参戦する一番のきっかけとなったのは、pixiv社内ISUCONの存在でした。

筆者はpixiv社ですでに1年半以上アルバイトをしています。
pixivはISUCONにかなり長い間関わっている企業であり、
特に今年は株式会社はてなとともに出題を担当していました。
そのこともあってISUCON関連の事業は特に力を入れており、
今年は社員研修の一環として4月に社内でISUCONの模擬大会を開催しました。
筆者はアルバイトですが暇だったので一緒に参加することになりました。

=== pixiv社内ISUCONのルール

pixiv社内ISUCONのルールは、競技時間が6時間半と短かったり、
チームメンバーが2人だったりと若干規模が縮小されている以外は、本家のISUCONと同じ競技ルールが適用されます。
前述したように用意されたWebアプリケーションも本番とほぼ遜色ない程度に作り込まれており、
かなり本気で取り組まないと高得点が狙えないようになっていました。

この時の様子、および使用した問題データはpixivのエンジニアブログ@<fn>{pixiv-isucon-blog}で公開されているので、
詳しい内容はそちらをご覧ください。

//footnote[pixiv-isucon-blog][ISUCON6出題チームが社内ISUCONを開催！AMIも公開！！ http://inside.pixiv.net/entry/2016/05/18/115206]

=== pixiv社内ISUCONに参戦

社内ISUCON本番、博多市はpixiv新卒2年目の社員とタッグを組んで戦いました。
ちなみにこの社内ISUCONは社員研修も兼ねているので新卒は専用のチームが組まれて別室に隔離(?)されていました。
あなおそろしや。

いろいろあってこのタッグは抽選によって偶然決まったペアなのですが、結果から言うとこのペアリングは
お互いに苦手な部分を補完しあう強力なマッチングとなりました。
最初に分担として僕がアプリケーションのコードを読み込み、
もう一人がデータベースのキュレーションやミドルウェアの設定を見直すことにより作業の最適化を図りました。
結果、データベース関連で複雑なJOINクエリを書いてN+1クエリを撲滅したり、
適切にインデックスを貼ることにより最速でパフォーマンスを改善したりと僕の手の届かない範囲で活躍をしてくれました。

結果、なんと序盤から中盤に至るまでダントツで1位をキープし続け、
競技終了30分前に突然倍のスコアで抜かされる大逆転を喫し、その後も抜きつ抜かれつを繰り返して、
最後はなんと終了1分前に100点という僅差をつけられて2位に終わるというドラマチックな敗北を経験しました。

//image[isucon-pixiv-progress][pixiv社内ISUCONの得点推移]

こうして初めての競技ながらも善戦し最後はその道のプロに優勝を譲った博多市ですが、
参加した感想を一言で表すと、@<strong>{本当に無茶苦茶楽しかったです。}
昔から勝負事ならだいたい楽しめる質ではあったのですが、少なくともISUCONは参加前に想像していたような、
ちまちまと細かい改善を重ねていって戦うマラソンのような粛々とした競技ではなく、
攻めの一手で相手を怯ませ、競技終了までに少しでも改善できるよう時間と戦い続け、
そして試行錯誤を繰り返してスコアが大きく跳ね上がったときにはチームメイトと手を叩きあうような、
ISUCONはそんなれっきとした「スポーツ」でした。

優勝は惜しくも逃しましたが、最初に2万点を突破した特別賞として3000円分のAmazonギフト券を受け取りました。
このとき、社内ISUCONの運営であり本戦の問題作成を担当しているcatatsuyさんからしきりに本大会への出場を勧められました。
僕としてもISUCONの面白さを知ったので俄然参加する意欲が湧いてきました。

== 本大会参加まで

が、ISUCONはチーム戦なので1人では参加できません。pixiv社内でチームメンバーを探すことも考えたのですが、
やはり古参とあって参加者数が多く、めぼしいメンバーはすでに誰かとチームを組んでいる状態でした。
どうしようかと悩んでいる最中、SunProメンバーの@hiromuからSunProとしてISUCONに出場しないかとの提案がありました。

渡りに船と思って大いに賛同し、SunPro内で出場者を集めた結果、僕とhiromuとhideo54でチームを組んで出場することになりました。
hiromuは筑波大学の学生であり昔から中学の部活のサーバーを管理していた経験があり手強い味方、
そしてhideo54は灘高校の現役高校生です。
チームを組むことを発案したhiromuにリーダーを任せ、hideo54にはひとまずリモートで参加してもらうことにしました。

=== チーム名について

さて、「チームえっち」という人を小馬鹿にしたようなチーム名ですが、
これは僕が咄嗟に10秒で考えたものです。

//image[team-ecchi][重要なチーム名が10秒で決められる様子]

画像にある通り名前の由来はチームメンバーのhiromu, hakatashi, hideo54の3人のハンドルネームの
頭文字が全て“H”であることに由来しています。
それ以外の含意はありません。ありませんったらありません。

ちなみに、このチーム名に関連して、参加登録の際にはHiromu, Hakatashi, Hideo54と、
全員の頭文字をわざわざ大文字にして登録しました。3人とも普段は小文字のハンドルネームで活動しているため渋られましたが、
無理を言って今回だけ改名してもらいました。結局このネタは本戦でも他の参加者に気づかれなかったため
あまり意味がありませんでした。ごめんよ……。

=== 練習試合

出場を決めたのはいいのですが、出場を発案したhiromuもついてきたhideo54もISUCONは未経験、
僕もpixiv社内ISUCONに参加したのみで本物のISUCONは未経験です。
流石にそのまま本番に臨むのは厳しいだろうということになり、チーム内で練習試合を行うことにしました。
問題はpixiv社内ISUCONのAMIが公開されていたのでそれを流用し、
社内ISUCONに参加した僕がオーガナイザーとなり、当日を思い出しながらEC2サーバーなど色々用意しました。
これが9月上旬のことです。

この時の競技ログは@<href>{https://github.com/hakatashi/private_isu}に上がっています。

== pixiv社内ISUCONの内容

さて、このあたりでこのpixiv社内ISUCONの内容を振り返ってみます。
ネタバレとなるので自力で解いて見ようと思っている方は@<hd>{preliminary}まで飛ばしてください。

この問題は前述の通りIsucogramという写真投稿SNSを高速化する問題です。
サーバーの構成は後述するような本番の問題と比べてシンプルになっており、
1台のサーバーにMySQLとWebアプリケーションが1つずつ乗っているというものです。
ユーザーは写真の投稿、削除、そしてコメントができるようになっており、
ユーザー認証やCSRFもちゃんと実装されています。@<fn>{implementation}

//footnote[implementation][これらの機能をちゃんと保持したまま変更していかないと減点や失格となります。]

実装はPHP, Ruby, Go, Node.jsの4言語が用意されていました。
最初にどの実装に手を付けるかというのは戦局を左右する重要な選択です。
社内ISUCON本番ではPHP, Rubyあたりが2人の書ける共通言語でしたが、
最初に4実装でそれぞれベンチマークを取った結果PHPが一番スコアが高かったので、
PHPで最後まで戦い抜きました。
チーム内練習試合の際は、PHPとNode.jsが選択肢として挙がりましたが、
こちらも最初にベンチマークを叩いた結果PHPが高かったことからPHPを選択したようです。

ちなみに、いろいろと経験を経た結果、最初にベンチマークを叩いた結果で手をつける実装を決めるのは、
あまり良い戦略ではないのではないかという考えに至りました。
与えられた最初の実装の段階では意図的にスコアが低くなるように実装されており、
そこに言語ごとの特性の違いが現れることは少ないです。それよりも、
メンバーの得意な言語は何か、とか、それぞれの言語の速度や仕様の違いとか、
そういう根本的な部分を見て選択する言語を考えるべきです。
が、この時点ではまだそういった考えに至っていませんでした。
この言語選択という最初で最大の難関に、この後も「チームえっち」は苦しめられていくことになります。

それでは、この問題に対して実際に効果のあった変更点を説明していきます。

=== MySQLのテーブルにインデックスを張る

社内ISUCON本番では、データベースの高速化の中でも一番手軽にできる改善としてインデックス張りをやりました。
データベースのインデックスはメモリ消費量と処理速度のトレードオフです。
なので、手当たり次第にカラムにインデックスを貼っていけばいいものではないのですが、
SORT句やWHERE句で絞り込みを行っている箇所を探して重点的にインデックスを張っていけば、
手軽にスコアアップが狙えます。本番ではこれだけで特別賞をものにしました。

練習試合ではインデックスを張り始めるまでに若干時間がかかりました。
実のところインデックス張りはあまりに簡単すぎるためかこれ以降の試合では想定解として出題されなかった@<fn>{index}
のですが、コスパのいい定石を覚えておくことが重要だということは学びました。
そういう意味では練習試合もかなり役に立ったのではないかと思います。

//footnote[index][すでにデータベースの主要な箇所にはインデックスが貼ってある状態だった。]

=== トップページのクエリを適切な件数に制限

アプリケーションのボトルネックの1つであるSQLのクエリを調べるためには、
MySQLのSlow Query Logが有効です。とりあえず設定でこれをオンにした状態でベンチマークをとりました。
するとトップページのクエリでデータベースから全件取ってきてアプリケーション側で20件に切り出すという
頭の悪い実装をしている部分が重いとわかるので、この部分をうまいこと20件だけ取ってくるようにすれば、
DBの処理も通信のオーバーヘッドも押さえられて軽くなります。
また、取得するカラムを必要なものだけに絞るのも効果がありました。

ここで注意しないといけなかったのが、この写真投稿サイトの投稿は一部が論理削除されており、
素直に20件だけDBから取ってきたら表示する際に件数が足りなくなってベンチマークソフトに怒らられるという件です。
これを解決するにはちゃんとテーブルをJOINできる形にしてあげてWHERE句で絞ってあげる必要があるのですが、
いきなりそこまで手を付けなくても、適当に大きめな件数（例えば、40件程度）を取ってきてやればベンチマークは通りました。
ベンチマークソフトの実装がやや甘かったのが幸いしたようです。

==={N+1} N+1クエリの撲滅

もちろん、ちゃんとJOINしてN+1クエリを消してあげることも重要です。
写真に投稿されたコメントを取得したり、削除されているかの判定を行ったりとさまざまなN+1クエリが
複雑に絡まり合っているので、これを一つ一つ消してあげるとかなりスコアが伸びます。
練習試合では時間が短かったこともありそこまで手を付けられなかったようですが、
社内ISUCON本番ではチームメンバーが（僕には理解できない）複雑なクエリでN+1クエリを完全に消してくれました。

=== 外部コマンドを呼び出している部分をネイティブの実装に置き換え

与えられた実装ではパスワードのハッシュを計算する部分で外部のopensslコマンドを呼び出すという、
普通なら絶対にやらないであろう実装をしています。
言語にもよりますが外部コマンドを呼び出すのはオーバーヘッドが大きく重いので、
ここを言語ネイティブのハッシュ関数に置き換えてやるとスコアが伸びます。
これは本番でも練習試合でも比較的すぐ気づいて直しました。

=== 画像データをデータベースではなくファイルシステムに保持し、静的ファイルとして配信

さて、ここからがある意味今回の問題の一番の肝です。
この問題のWebアプリは投稿された画像を配信するのが主目的なので、一番よくアクセスされるのは画像なのですが、
その画像のデータをどこに保持しているかというと、なんとMySQLのカラムにBLOBデータとして突っ込まれているのです。
つまり画像をリクエストするたびにアプリケーションを通してSELECTクエリが走り巨大な画像データがやり取りされるということであり、
明らかにパフォーマンスが落ちる原因です。

今回の画像は頻繁に更新されることがなく静的データとみなしてよいので、
マイグレーションスクリプトを書きデータベースから手元のファイルシステムに落としてきた上で、
アプリケーションを介さずNginXから直接静的ファイルとして配信するようにしました。
この処理は結構手間がかかりますが、これをすることによってスコアはかなり上昇します。
ここまでは本番でも練習試合でも気づいて修正することができたのですが、
真の意味で勝負の明暗を分けたのはここから先です。

=== NginXの設定にブラウザキャッシュを使う設定を追加

画像を静的配信としたことで、さらなる最適化ができるようになります。
それがブラウザキャッシュを使う設定です。

これはNginXの設定に以下の1行を追加するだけなのですが、
これだけでなんとスコアが5万点から20万点近くにまで跳ね上がります。

//list[nginx-expires][NginXに追加する設定]{
expires off;
//}

今回のベンチマーカーにはHTTPのCache-Controlが実装されており、
EtagヘッダやLast-Modifiedヘッダを認識して適切にファイルをキャッシュするようになっていました。
結局のところ何を措いても一番重いのは画像の転送であることは間違いないので、
ブラウザのキャッシュを利用してそもそも転送する回数を減らしてしまえば大幅に早くなるという算段です。
まさに画像を配信するpixivの知見から生まれた問題と言っていいでしょう。

@<img>{isucon-pixiv-progress}を見ても分かる通り、このことに気づいたチームとそうでないチームの差は歴然です。
練習試合では残念ながらそこまで頭が回らず、6万点強で終了するという微妙な結果に終わりました。
練習試合によって試合の感覚をつかむとともに、大きな課題を残すことになりました。

=== その他細かい改善

上に挙げた以外にも細かい改善はたくさん行っています。例えば、

 * スワップの有効化
 * my.cnfの設定変更
 * php.iniの設定変更
 * Slimの設定変更
 * PHPのpreg_match関数をctype関数に置き換え
 * gzip圧縮有効化
 * ログ無効化

などはかなり試行錯誤しながら行いました。スワップの有効化は結果的に、
OOM killerに殺されてSSHでログインできなくなるなどのトラブルを避けられたためよかったのですが、
それ以外はあまり目に見える効果がありませんでした。
gzipに関しては圧縮のぶん重くなるため逆にスコアが下がる始末です。

どうやらISUCONではこのあたりに手を付けるのは地雷のようです。
練習試合ではこのあたりの感覚も何となくですが掴めたように感じます。

=={preliminary} 予選出場

そんなこんなで練習試合を終え、若干の不安を抱えたまま予選を迎えることになりました。

ちなみに予選で学んだのは高速化の難しさだけでなく、リモート参加者とのコミュニケーションの難しさも学びました。
複数人で分担してコードを修正していかなければいけない以上、
チームメンバー同士のコミュニケーションは効率よく作業を進めるための生命線です。
なのでできればチームメンバーが全員顔を合わせて競技するのが望ましいのですが、
さすがに予選に参加するためだけに大阪から東京まで来てもらうのは厳しいので、
関東在住の僕とhiromuは同じ場所に集まり、hideo54はSkypeを常時つないだまま予選に参加することにしました。

予選（と本戦）ではインフラとしてMicrosoft Azureを使用するとのことで若干操作が不安だったので、
事前に渡された情報を元にデプロイの練習をしておきました。
ISUCON運営に推奨されたとおり昨年度の予選問題のデプロイを行ったのですが、
プロビジョニングが重すぎてなかなか競技まで入れませんでした。

当日起床に失敗して競技開始時刻に出遅れたりとトラブルもありましたが、
概ね万全の状態で競技に臨めたように思います。

== 予選問題の内容

今回の問題は、「はてなキーワード・はてなダイアリー」と「はてなスター」を模したサービス、“Isuda”と“Isutar”がお題でした。
このうちユーザーに見える部分はIsudaのみであり、IsutarはサブアプリケーションとしてAPIのみ動作しています。

Isudaの機能ははてなダイアリーと同じようにユーザーが文章を投稿できるSNSなのですが、
重要な機能として、はてなキーワードやニコニコ大百科のように、
記事中に現れたキーワードを自動的に別記事にリンクする機能が実装されています。
予選ではこの部分の処理の高速化が主な焦点となりました。

言語選択ですが、練習試合でPHPを選択したこともあり、無難な選択としてPHPを選ぶことを事前に決めておきました。
今回の予選ではこれがかなりの悪手となり、CGI上で動作するというPHPの性質上、
正規表現をオンメモリにキャッシュできなかったりと非常に苦労させられました。
結果、本戦出場チームのうち唯一のPHP選択チームとなり、問題を見ずに言語選択を行ったことを悔やむ結果となってしまいました。

以下、本番の予選で我々のチームがやったことを書き連ねていきます。
この時の競技ログは@<href>{https://github.com/hiromu/isucon6-qual}に上がっています。

=== IsutarをIsudaに統合

まず自明なボトルネックとして、IsudaとIsutarが密結合しており、
お互いにAPIを叩き合って極めて効率が悪い実装になっているので、
まずはこの2つのWebサービスを統合してDBも共有するようにしました。
この作業は比較的スムーズに進み、1時間半ほどで終わりました。

==={N+1-2} N+1クエリの撲滅

pixiv社内ISUCONの問題ほどではないですがstar取得周りでN+1クエリが若干あったので、
これもJOINすることにより消しておきました。

雑感ですが、N+1クエリやインデックスのような「簡単な」修正点は今回は予選本戦ともにほとんど残されていなかったように感じます。
やはり本戦に参加するためにはこの程度はできて当然ということなのでしょうか……。

=== Isupamの判定結果をキャッシュしておく

Isudaに新しい記事が投稿される際、内部的にスパム判定を行ってスパムと判定された記事は
投稿を拒否するようになっています。
この部分の実装ですが、読んでみるとなんと“Isupam”なるバイナリを呼び出してスパム判定を行っています。

ソースコードも見当たらず、すわリバースエンジニアリングかと騒然としました。
作問者の解説によると、意図としてはソースコードが紛失してしまったアプリケーションが動いているという設定らしいです。
さすがにそこまでの状況は実務上でもそうそうないように感じるのですが、
それはともかく、この部分を何とかするために苦労させられました。
一時は本当にバイナリをリバーシングしようかとも思ったのですが、
結局妥当な解決策として、Isupamのスパム判定の結果を手元にキャッシュしておくようにしました。

Isupamの判定の元となるデータは投稿された記事のタイトルと本文です。
これらは少なくともベンチマーカーの挙動を観測した範囲内では完全に1対1で対応しており、
スパム判定された記事のタイトルだけ記憶しておけば次回以降Isupamに投げなくても判定をスキップできることになります。

投げられた記事の判定結果をキャッシュする処理をhideo54に実装してもらい、
何度かベンチマークを投げるとキャッシュヒット率が100%になりました。
しかし苦労した割には思ったほどスコアが伸びず、かなり歯痒い思いをしました。

それもそのはず、作問者の解説によるとこのIsupamは「完全に目眩ましであり、ボトルネックにはならないところ」で、
我々はまんまとこの目眩ましに引っ掛けられたことになります。
ちゃんとボトルネックになっている部分を計測した上で修正を行うことの重要さを噛み締めました。

=== キーワードリンクにトライ木を実装

さて、今回の予選の主題であるキーワードリンクですが、
この部分はかなり綿密にベンチマーカーが実装されていました。
最初の方は適当なキャッシングとインチキで誤魔化そうとしたのですが、
そのたびにリンクが足りないなどのメッセージで怒られてfailしてしまいました。
やはりこの部分はちゃんと高速化してあげる必要があるようです。

文字列からあらかじめ定義された辞書に一致する部分文字列を高速に探索するアルゴリズムに、
トライ木というものが存在します。これを実装すればキーワードリンクが高速化できるだろうというのは、
アルゴリズムに詳しいhiromuが比較的早期から気がついていたことなのですが、
言うは易く行うは難しというものです。
トライ木は実装が重く、実装する基盤がPHPということもありフルスクラッチで実装するのは諦めました。

そこで、現在のIsudaの実装とうまくハマりそうなPHPのトライ木の実装を探したところ、
php-ext-trie-filterというライブラリを見つけました。
が、ドキュメントが中国語しかなく、これを組み込むまでに相当な苦労が必要だったようです。
hiromuは中盤から終盤に至るまでほとんどこの作業にかかりっきりになっていました。

結果、なんとかトライ木実装でキーワードリンクが動く状態に持っていくことができ、
ベンチマークのスコアを3万台から5万台に底上げできました。

=== 予選結果

途中、何をやってもスコアが伸びないという経験が続き非常にグロッキーになっていましたが、
結果、予選の最終スコアは72010点となり、なんとか学生枠1位で本戦出場権を勝ち取ることができました。
しかし社会人枠で見ると本戦圏外であり、改めてISUCONの競技者レベルの高さを思い知らされました。

ただ、今回の予選問題はやれることが少なく、今振り返って考えても競技終了時点の状態からさらに改善するべきところは
ほとんどなかったように感じます@<fn>{errors}。それで社会人枠に太刀打ちできないというのは、
単純に社会人のレベルが高すぎるということ以外に、やはり最初の言語選択がまずかったということが大きいように感じます。
一度選択してしまった言語は容易に変えられないと思うので、
PHPでオンメモリでデータを持てないなら持てないなりにmemchachedを活用するなり何なりを試してみるべきだったかもしれません。

//footnote[errors][いちおう、最後までベンチマーカーのエラーが消えなかったのは改善点だったと思われます。]

ちなみに今年のISUCON予選は、競技プログラミング勢が大躍進していました。
トライ木が有効に働く問題だったのに加えて、チームAnagoがなんとお題のアプリケーションをC++を使って(!)
フルスクラッチで(!)書き直すという力技で予選3位で通過しており、住んでいる世界の違いを感じました。@<fn>{full-scratch}

//footnote[full-scratch][さらに恐ろしいのはC++でフルスクラッチで書き直しても3位しか取れない競技レベルの高さですが……]

== 本戦出場

正直、予選から本戦までの準備は万全ではありませんでした。
予選でPHPを選択したことが大きな枷となったことを教訓に、他の言語（特にPython）の実装を読み、
言語の選択肢を増やす努力はしましたが、参加メンバーがそれぞれに忙しく、@<fn>{hakatashi-eeic}
それ以上の準備はできていなかったというのが実情です。
可能ならば公開されている過去問を解いたり参加記を読んだりして基礎体力をつけておくべきだったかと思います。

//footnote[hakatashi-eeic][特に僕は進学内定した学科の授業が始まり、課題の多さに忙殺されていました。]

そんなこんなで暗澹たる思いを抱いたまま本戦当日を迎えました。
本番前に会場近くのカフェに集まって朝食兼作戦会議をしてから会場入りしたら最後のチームだったりと、
色々と予想外なことがありましたが無事競技に参加することができました。

本戦の問題ですが、度肝を抜かれました。出題したのはpixivのチームでしたが当然問題の内容などは事前に聞いていません。
複数のサーバーを管理しないといけないということは過去の出題からして覚悟していたことですが、
使われている技術がSVG, React, Docker, Node.js, SSEと想定を遥かに超えてモダンなものになっており、
過去のISUCONや、pixiv社内ISUCON、予選で学んだノウハウがそのままではほとんど生きませんでした。

お題のアプリケーションは、「リアルタイムに掲示板全員に描いた絵が配信される、次世代イラストコミュニケーションサービス」でした。
ウェブサイトを開くとお絵描きチャットを行う部屋が用意されており、マウスを使って絵を描くと
その部屋を開いているユーザー全員にその情報が配信されるというものでした。

ちなみに、pixivが出題するのだからまたイラストに関連した問題が出るだろうと当たりをつけて、
画像の圧縮や配信の最適化について若干勉強したりしていました。
その予想はある意味で当たっていたのですが、扱う画像はラスター画像ではなくSVGであり、
こちらもいい意味で裏切られました。

さて、予選でPHPの辛酸を嘗めた「チームえっち」でしたが、
一通りPHPとPythonの実装を読んだ上でやはりPythonでやっていくのに厳しさを感じたので最初PHPを選択しました。
が、途中でSSEとの相性に限界を感じてPython実装に切り替える暴挙に出ます。

以下、やったこと、やりたかったことを順番に書き連ねていきます。
この時の競技ログは@<href>{https://github.com/hakatashi/isucon6-final}に上がっています。

=== アプリケーションを複数台に分散

本戦では競技に使えるサーバーとして5台のサーバーが与えられました。
まずはこれを効率よく活用しなければならないと思い、メンバーで相談して、以下のような構成にすることに決めました。

 * フロントサーバー (1台): NginXでリクエストを複数台に振り分ける。
 * Reactサーバー (3台): サーバーサイドレンダリングを行う。
 * アプリケーションサーバー (1台): Reactサーバーからのリクエストを受け、描いた絵の情報を配信する。

正直、このアプリケーションの本質をあまり理解していなかったと思います。
まずバックエンドのアプリケーションサーバーが1台になっているのは、
コネクションを維持して新しいリクエストが来るたびにPub/Subを行う仕組みを想定していたからですが、
最初PHPでそれを行おうとしたのはやはり正気の沙汰ではなかったようです。

アプリケーションサーバーの初期実装ではSSEの後ろでデータベースにポーリングする構成になっており、
これならバックエンドを1台にしなくてもうまく動きます。
出題者としても無理にPub/Subを実装することをそこまで求めていなかったようで、
リアルタイムウェブといえばイベント駆動という意識にとらわれて最善策を選べなかったのは反省すべき点だと思います。

ちなみに、サーバーを複数台に分散すると同じコードを複数台にデプロイしないといけないため、
手動では埒が明かなくなります。そのためたいてい簡単なデプロイスクリプトを書くのですが、
これがちゃんと動くようにするまでがなかなか大変です。
Dockerに不慣れだったこともあって、
競技が始まってから2～3時間は複数台のサーバーのセットアップとデプロイスクリプトの準備に取られてしまいました。

=== pointsテーブルを非正規化

今回のお絵描きアプリにおける描画情報は、それぞれの折れ線を表すstrokeと、
strokeを構成する点を表すpointで構成されているのですが、
初期実装ではstrokeとpointが正規化され、別々のテーブルに格納されています。
今回のアプリケーションでは一度描いたstrokeの情報が更新されることはないので、
pointsの正規化は単に処理が重くなる原因です。
pointsテーブルのレコード数は数百万のオーダーになっており、
これを直せばかなり早くなるだろうと思い手を付けました。

が、Reactのコードを変更するとbundle.jsも書き換わることに気づかずfailを連発し、
それを解決しようとしてバグを生み続けてしまい、結局本番には投入できませんでした。
骨折り損のくたびれ儲けです。

ちなみに、出題者によるとこの修正は「予想外の最適化」だそうです。

=== 感想と反省

その他、hiromuがPythonからRedisのPub/Subを利用するように修正したり、
hideo54がSQLの最適化を行ったりしましたがどれもバグが取り除けず本番には投入できませんでした。

切り替えたPython実装で何もできないまま時間だけが経過し、
最終的にPHP実装に戻して初期状態とほぼ変わらないスコアを計測しなおして競技終了を迎えました。
順位は26位中19位。見事な惨敗です。

敗因として、pixiv社内ISUCONや予選での経験が想像以上に尾を引いており、
出題形式が大幅に変わったにも関わらず、しがらみに囚われて大胆な選択が取れなかったということがあると思います。
競技終了後での懇親会では、「Node.js実装を選択してReactと結合する」「アプリケーションをDockerから剥がす」など、
大胆ながらも言われてみれば「なるほど」と思うような解法を教えてもらい、
そのあたりの発想ができなかったことが「チームえっち」の主な敗因なのではないかと思います。

== ISUCON攻略について

さて、惨敗したチームが言うのも何ですが、我々の失敗から少しでも学んでいただけるよう、
これを読んでいる方にISUCONで勝つためのアドバイスをしたいと思います。

まず、何よりも過去問の研究を怠らないことです。

ISUCONは経験がものを言うスポーツです。本来は社会人として実務上でスキルを磨くのが一番良いのでしょうが、
それで間に合う人は決して多くないと思うので、やはり過去問を解いて経験を積むのが一番です。
ISUCONももう6回になるので、公開されている過去問を解くだけでもずいぶん違うと思います。

そして、数値計測を怠らないことです。

別にISUCONに限った話ではないですが、パフォーマンスチューニングの世界では、
極端な話、計測値以外の全ては机上の空論です。どんなに理屈が正しそうでも早くならない時は早くならないし、
逆に意外な変更が功を奏すことがあります。チューニングの効率を上げるためにも、こまめに数値計測を取り、
どこがボトルネックになっているのかを冷静に判断しましょう。
また、数値計測のスキルを磨いておくのも重要です。

== 最後に

勝って、負けて、いろいろ辛い思いをして、いろいろ書きましたが、まとめるとISUCONは素晴らしい大会でした。
次回以降も開催されるならぜひ参加したいですし、これを読んでいるISUCON未経験者の方にも、
ぜひISUCONに興味を持ってもらいたいと思っています。
この場を借りて、ISUCON主催のLINE株式会社、ならびに運営各社と関係者の皆様にお礼申し上げます。

最後までお読みいただきありがとうございました。
次回の同人誌では「Re:ゼロからコンピューターを作る異世界生活(仮題)」を書きたいと思います。お楽しみに。
